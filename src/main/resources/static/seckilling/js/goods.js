/**
 * 未到秒杀时间，此js的内容随意，到秒杀时刻时，在js服务器重新生成此js文件
 */

var beginSeckilling = true;
var buyUrl = "http://www.sky.com?random=qw12W"; // 下单页面url。随机数缓存到redis，直到秒杀开始才知道

function enableBuyBtn() {
	// 点亮购买按钮
}

function buy() {
	/*
	 * 下单前置检查。
	 * 需要请求服务端，判断是否能跳转到下单页面，目的是为了减轻下单服务器的压力；
	 * 如果不能跳转，更新js文件内容，将“开始秒杀”标识清空、“购买”按钮置灰，直接跳转回秒杀结束页面。
	 * 
	 * 判断逻辑：
	 * 1、每个服务器自己限制下单请求量：
	 * 为了防止刷新页面后，进入不同的服务器，导致上一次返回秒杀结束，下一次又可以进入下单页面，
	 * 可以可以考虑通过cookie的方式来应对，符合一致性原则。当然可以采用最少连接的负载均衡算法，出现上述情况的概率大大降低。
	 * 2、全局检查下单请求量：
	 * 已超过秒杀商品总数，返回已结束页面给用户。
	 * */
	
	// 跳转到buyUrl
}